
import msgpack
import json

bytestring_payload = {
	"timestamp": 1752011507,
	"metrics": [
		{
			"name": "AXUVTE99",
			"timestamp": 1752010891,
			"datatype": 17,
			"properties": {
				"keys": [
					"source_name",
					"channel_id",
					"ch_gain",
					"ch_range",
					"ch_offset",
					"wave_byte_order",
					"time_zero",
					"time_range",
					"acq_srate",
					"acq_bit_res",
					"acq_total_samples",
					"checksum"
				],
				"values": [
					{
						"type": 12,
						"string_value": "AXUV_chan_1"
					},
					{
						"type": 3,
						"int_value": 0
					},
					{
						"type": 9,
						"float_value": 3
					},
					{
						"type": 9,
						"float_value": 5
					},
					{
						"type": 9,
						"float_value": 0
					},
					{
						"type": 3,
						"int_value": 0
					},
					{
						"type": 9,
						"float_value": 0
					},
					{
						"type": 10,
						"float_value": 0.032764
					},
					{
						"type": 3,
						"int_value": 250000
					},
					{
						"type": 3,
						"int_value": 16
					},
					{
						"type": 3,
						"int_value": 8191
					},
					{
						"type": 3,
						"int_value": 27996
					}
				]
			},
			"bytes_value": '''1F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F40
1F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F40
1F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F40
1F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F40
1F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F40
1F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F40
1F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F40
1F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F40
1F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F40
1F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F401F40'''
        }
	]
}

array_payload = {
	"timestamp": 1752011507,
	"metrics": [
		{
			"name": "AXUVTE99",
			"timestamp": 1752010891,
			"datatype": 17,
			"properties": {
				"keys": [
					"source_name",
					"channel_id",
					"ch_gain",
					"ch_range",
					"ch_offset",
					"wave_byte_order",
					"time_zero",
					"time_range",
					"acq_srate",
					"acq_bit_res",
					"acq_total_samples",
					"checksum"
				],
				"values": [
					{
						"type": 12,
						"string_value": "AXUV_chan_1"
					},
					{
						"type": 3,
						"int_value": 0
					},
					{
						"type": 9,
						"float_value": 3
					},
					{
						"type": 9,
						"float_value": 5
					},
					{
						"type": 9,
						"float_value": 0
					},
					{
						"type": 3,
						"int_value": 0
					},
					{
						"type": 9,
						"float_value": 0
					},
					{
						"type": 10,
						"float_value": 0.032764
					},
					{
						"type": 3,
						"int_value": 250000
					},
					{
						"type": 3,
						"int_value": 16
					},
					{
						"type": 3,
						"int_value": 8191
					},
					{
						"type": 3,
						"int_value": 27996
					}
				]
			},
			"bytes_value": [
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
				8000,
              	8000,
			]
		}
	]
}


def compare_payload_sizes(payload, description="Payload"):
    # Serialize the payload using msgpack
    serialized_payload = msgpack.packb(payload, use_bin_type=True)

    # serialize the payload using JSON
    json_payload = json.dumps(payload, ensure_ascii=False).encode('utf-8')
    serialized_json_payload = json_payload

    # Compare sizes
    msgpack_size = len(serialized_payload)
    json_size = len(serialized_json_payload)

    print(f"Comparing payload sizes for: {description}")
    print(f"Msgpack serialized payload size: {msgpack_size} bytes")
    print(f"JSON serialized payload size: {json_size} bytes")
    print(f"Msgpack is {'smaller' if msgpack_size < json_size else 'larger'} than JSON by {abs(msgpack_size - json_size)} bytes")
    print(f"Msgpack is {msgpack_size / json_size:.2f} times smaller than JSON" if json_size > 0 else "JSON size is zero, cannot compare ratio")



if __name__ == "__main__":
    compare_payload_sizes(array_payload, "Array Payload")
    compare_payload_sizes(bytestring_payload, "Bytestring Payload")